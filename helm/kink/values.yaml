# All pods will use the same image
image:
  repository: ghcr.io/meln5674/kink
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# By default, the kubelet data is stored on an emptyDir volume for performance.
# It is not recommended to use networked storage, but if you have a storage class
# that maps to direct disk access, you can set that here
kubelet:
  persistence:
    enabled: false
    size: 8Gi
    accessModes:
    - ReadWriteOnce
    storageClassName: 

# Extra global configuration to apply to all pods

extraEnv: []
extraArgs: []
extraVolumes: []
extraVolumeMounts: []

# Configuration for the control plane ("servers")

controlplane:
  replicaCount: 1
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  extraLabels: {}

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    api:
      port: 6443
    kubelet-metrics:
      port: 10250
    etcd-client:
      port: 2379
    etcd-peer:
      port: 2380
    rke2-discover:
      port: 9345

  # If this is set, this will be used along with the nodeport to build the apiserver url when exporting your kubeconfig
  nodeportHost: ''

    
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Persistence for etcd
  persistence:
    enabled: false
    size: 8Gi
    accessModes:
    - ReadWriteOnce
    storageClassName: 
    # Additional places to mount the shared /etc/rancher and /var/lib/rancher volume to
    # Uses the same directory for both mountPath and subPath
    extraMounts: []

  # If enabled, the first host listed will be used to build the kubeconfig apiserver url
  # This requires SSL passthrough, TLS termination/re-encryption will NOT work
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
    # - host: chart-example.local
    tls: []


  # If true, will taint controlplane nodes with node-role.kubernetes.io/control-plane=true:NoSchedule
  defaultTaint: true
  extraTaints: [] # { key: "", value: "", effect: "" }

  extraEnv: []
  extraArgs: []
  extraVolumes: []
  extraVolumeMounts: []

# Configuration for worker nodes ("agents")
worker:
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  extraLabels: {}

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    kubelet-metrics:
      port: 10250
  extraPorts: []
  # - name: http
  #   port: 80
  #   protocol: TCP
  # - name: https
  #   port: 443
  #   protoco: TCP

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # TODO
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Arbitrary persistence for worker nodes
  # Each worker gets its own volume
  persistence:
    enabled: false
    size: 8Gi
    accessModes:
    - ReadWriteOnce
    storageClassName: 
    # Locations to mount the volume
    # Each mount will use a matching sub-path, so all mounts will be a unique directory in the volume
    extraMounts:
    - /opt/local-path-provisioner

  extraEnv: []
  extraArgs: []
  extraVolumes: []
  extraVolumeMounts: []

# If enabled, an additional deployment will be created which watches the guest cluster
#   for NodePort and LoadBalancer type services, and dynamically manages a service on
#   the host cluster named {{ fullname }}-lb with the same ports
loadBalancer:
  enabled: false
  labels: []
  service:
    annotations: {}

  # Configuration for the manager deployment
  manager:
    replicaCount: 1
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""
    rbac:
      # If true, create a role and rolebinding to provide access to the dynamic service
      create: true

    extraLabels: {}

    podAnnotations: {}

    podSecurityContext: {}
      # fsGroup: 2000

    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    nodeSelector: {}

    tolerations: []

    affinity: {}

    extraEnv: []
    extraArgs: []
    extraVolumes: []
    extraVolumeMounts: []

  # If enabled, the load balancer manager will search for guest ingresses and make them accessible from the host ingress
  ingress:
    enabled: false


    # Each mapping defines a different ingress resource to be managed dynamically
    classMappings: []
    # - guestClassName: # The ingressClassName on the guest ingress resources to watch for. Must be unique
    #   className: # The ingressClassName on the host ingress resource to create. May be repeated.
    #   annotations: {}
    #   # If the ingress controller is implemented as a NodePort/LoadBalancer
    #   nodePort:
    #     namespace: # Namespace of the service
    #     name: # Name of the service
    #     # Can only specify one, https requires SSL passthrough
    #     httpPort: # Name or port number of the http port
    #     httpsPort: # Name or port number of the https port
    #   # If the ingress controller is implemented as a DaemonSet with a host port
    #   hostPort:
    #     # Can only specify one, https requires SSL passthrough
    #     httpPort: # The http host port
    #     httpsPort: # The https host port
   
    # Each entry generates a separate, static ingress
    static: []
    # - className: # The ingressClassName on the host ingress resource to create. May be repeated.
    #   annotations: {} # The ingressClassName on the host ingress resource to create. May be repeated.
    #   hosts:
    #   - host: # Hostname of the ingress rule
    #     # Path info for ingress rule
    #     paths:
    #     - path: /
    #       pathType: Prefix
    #   # To target a host port
    #   hostPort: # Port number 
    #   # To target a guest NodePort or LoadBalancer service
    #   nodePort:
    #     namespace: # Namespace of the guest service
    #     name: # Name of the guest service
    #     port: # Name or port number in the guest service. NOTE: If the port has a name, you MUST use the name, not the number.
    #   # If true, add a secret-less TLS entry for each host
    #   tls: false
      





# If enabled, run a hook job to create a secret containing a kubeconfig usable by mounting within another pod
kubeconfig:
  enabled: false
  labels: []
  job:
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # Annotations to add to the service account
      annotations: {}
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: ""
    rbac:
      # If true, create a role and rolebinding to provide access to the dynamic service
      create: true

    extraLabels: {}

    podAnnotations: {}

    podSecurityContext: {}
      # fsGroup: 2000

    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000

    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

    nodeSelector: {}

    tolerations: []

    affinity: {}

    extraEnv: []
    extraArgs: []
    extraVolumes: []
    extraVolumeMounts: []




sharedPersistence:
  enabled: false
  size: 8Gi
  accessModes:
  - ReadWriteOnce
  storageClassName:
  mounts:
  - /opt/shared-local-path-provisioner

  # If this is set, no PVC will be created on the host, but a RWX StorageClass will still be created on the guest cluster.
  # This is only intended to support the use case of a single node with no persistence storage, using emptyDir's for all data
  enabledWithoutStorage: false

# The file gateway is intended to provide an efficient way to transfer files into the cluster.
# Unlike a KinD cluster, there is no reasonable way to mount the current directory into the cluster.
# Relying on kubectl cp relies on the control plane, which may be significantly bandwidth limited
# compared to worker nodes.
# The file gateway allows transmitting a tarball directly via a NodePort to pod that mounts the volume
# described in the sharedPersistence section.
fileGateway:
  enabled: false
  service:
    type: ClusterIP
    port: 8443
  ingress:
    # enabled: set by controlplane.ingress.enabled
    hosts: []
    # - host: chart-example.local
    tls: []

token:
  value: my-secret-token
  existingSecret:
    name:
    tokenKey: token

clusterDomain: cluster.local

rke2:
  enabled: false

iptables:
  useLegacy: false
